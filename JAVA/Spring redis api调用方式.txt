需要手动配置和redis相关的配置：

1.设置JedisConnectionFactory：

   private JedisConnectionFactory jedisConnectionFactory() {

        JedisConnectionFactory factory = new JedisConnectionFactory();
        factory.setHostName("192.168.6.231");
        factory.setPort(6379);
        //factory.setPassword();
        factory.setUsePool(true);
        factory.setPoolConfig(jedisPoolConfig());
        factory.afterPropertiesSet();
        return factory;
    }

 2.设置连接池配置：
 
    private JedisPoolConfig jedisPoolConfig(){

        JedisPoolConfig jedisPoolConfig=new JedisPoolConfig();

        //最大空闲连接数, 默认8个
        jedisPoolConfig.setMaxIdle( 8 );

        //最小空闲连接数, 默认0
        jedisPoolConfig.setMinIdle( 0 );

        //最大连接数, 默认8个
        jedisPoolConfig.setMaxTotal(8);

        //获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
        jedisPoolConfig.setMaxWaitMillis(-1);

        /*

        //连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true
        jedisPoolConfig.setBlockWhenExhausted(true);

        //设置的逐出策略类名, 默认DefaultEvictionPolicy(当连接超过最大空闲时间,或连接数超过最大空闲连接数)
        jedisPoolConfig.setEvictionPolicyClassName( "org.apache.commons.pool2.impl.DefaultEvictionPolicy" );

        //是否启用pool的jmx管理功能, 默认true
        jedisPoolConfig.setJmxEnabled( true );

        //是否启用后进先出, 默认true
        jedisPoolConfig.setLifo( true );

        //逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
        jedisPoolConfig.setMinEvictableIdleTimeMillis(1800000);

        //每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
        jedisPoolConfig.setNumTestsPerEvictionRun( 3 );

        //对象空闲多久后逐出, 当空闲时间>该值 且 空闲连接>最大空闲数 时直接逐出,不再根据MinEvictableIdleTimeMillis判断  (默认逐出策略)
        jedisPoolConfig.setSoftMinEvictableIdleTimeMillis(1800000);

        //在获取连接的时候检查有效性, 默认false
        jedisPoolConfig.setTestOnBorrow( false );

        //在空闲时检查有效性, 默认false
        jedisPoolConfig.setTestWhileIdle( false );

        //逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
        jedisPoolConfig.setTimeBetweenEvictionRunsMillis(-1);

        */

        return jedisPoolConfig;
    }

 
 3.创建RedisTemplate，redisTemplate类似JdbcTemplate和HibernateTemplate:

    private RedisTemplate<Object, Object> redisTemplate() {

        RedisTemplate<Object, Object> redisTemplate = new RedisTemplate<Object, Object>();
        redisTemplate.setConnectionFactory(jedisConnectionFactory());

        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer());
        //redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<User>(User.class));
        redisTemplate.afterPropertiesSet();
        return redisTemplate;
    }


 4.然后通过RedisTemplate操作缓存：
基本操作：

	User user=new User("1","jack");

        RedisTemplate redisTemplate=redisTemplate();

        //存入或更新缓存
        redisTemplate.opsForValue().set(user.getId()+"user",user);
        //redisTemplate.opsForValue().set(user.getId()+"user",user,1000);设置缓存时间

        //从缓存中获取
        User user1=(User) redisTemplate.opsForValue().get(user.getId()+"user");

        //从缓存中删除
        redisTemplate.delete(user.getId()+"user");



RedisTemplate还可以进行许多其他操作
-------------------------------------------------------------------
-------------------------------------------------------------------

RedisTemplate可以通过RedisCallback获得RedisConnection来直接操作redis

可以通过execute方法来执行具体操作：

	Object o=redisTemplate.execute(new RedisCallback() {
            public Object doInRedis(RedisConnection connection) throws DataAccessException {

		//通过connection来进行需要的操作


                return null;
            }
        });


mybatis需要程序员自己编写sql语句，mybatis官方提供逆向工程 可以针对单表自动生成mybatis执行所需要的
代码（mapper.java, mapper.xml, pojo类）

企业事件开发中，常用的逆向工程方式：
由于数据库的表生成java代码


下载逆向工程
        https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2

使用方法  先把工程加到eclipse中
1、  修改generator配置文件；
2、  使用java类来执行逆向工程；
3、  把生成的代码拷贝到项目中。


第一步：修改generator配置文件

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <context id="testTables" targetRuntime="MyBatis3">
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true" />
        </commentGenerator>
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
            connectionURL="jdbc:mysql://localhost:3306/mybatis" userId="root"
            password="root">
        </jdbcConnection>
        <!-- <jdbcConnection driverClass="oracle.jdbc.OracleDriver"
            connectionURL="jdbc:oracle:thin:@127.0.0.1:1521:yycg" 
            userId="yycg"
            password="yycg">
        </jdbcConnection> -->

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
            NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- targetProject:生成PO类的位置    .\src 当前目录中的SRC文件夹 -->
        <javaModelGenerator targetPackage="cn.mybatis.sm.domain" targetProject=".\src">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
            <!-- 从数据库返回的值清理前后的空格 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- targetProject:mapper映射文件生成的位置 -->
        <sqlMapGenerator targetPackage="cn.mybatis.sm.mapper" 
            targetProject=".\src">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>
        <!-- targetPackage：mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER"
            targetPackage="cn.mybatis.sm.mapper" 
            targetProject=".\src">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>
        <!-- 指定数据库表 -->
        <table tableName="items"></table>
        <table tableName="orders"></table>
        <table tableName="orderdetail"></table>
        <table tableName="user"></table>
        
    </context>
</generatorConfiguration>



第二步：使用java类来执行逆向工程

public class Generator {
    public static void main(String[] arhs) throws Exception{
        List<String> warnings = new ArrayList<String>();
        boolean overwrite = true;
        File configFile = new File("generator.xml");
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(configFile);
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
        myBatisGenerator.generate(null);
    }

}


第三步：把生成的代码拷贝到项目中



注意事项:
Mapper.xml映射文件已经存在时，如果进行重新生成mapper.xml映射文件时，内容不被覆盖而是进行内容追加，
 结果导致mybatis解析失败。

解决方法：删除原来已经生成的mapper xml文件再进行生成。

Mybatis自动生成的po及mapper.java文件不是内容而是直接覆盖没有此问题。



//自定义条件查询
public void testSelectByExample(){
  ApplicationContext ac=new ClassPathXmllApplication("applicationContext.xml");
  ItemsMapper itemsMapper=ac.getBean("itemsMapper");

  ItemsExample itemsExample=new ItemsExample();
  //通过criteria构造查询条件
  ItemsExample.Criteria criteria=itersExample.createCriteria();
  criteria.andNameEqualTo("笔记本");
  //可能返回多条记录
  List<Items> list=itemsMapper.selectByExample(itemsExample);
  System.out.println(list);
}

//更新数据
public void testUpdateByPrimaryKey(){
  ApplicationContext ac=new ClassPathXmllApplication("applicationContext.xml");
  ItemsMapper itemsMapper=ac.getBean("itemsMapper");

  //对所有字段进行更新,需要先查询出来，再更新
  Items items=itemsMapper.selectByPrimaryKey(1);
  items.setName("水杯");
  itemsMapper.updateByPrimaryKey(items);
  
  //如果传入的字段不为空才更新,在批量更新中使用此方法，不需要先查询，再更新
  //itemsMapper.updateByPrimaryKeySelective(items);
}

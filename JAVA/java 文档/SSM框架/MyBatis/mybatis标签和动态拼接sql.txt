动态拼接sql是mybatis核心  
通过表达式进行判断，对sql进行灵活拼接，组装


<if>标签和<where>标签
  当某个查询条件存在，则拼接，不存在（即用户没有根据该条件查询）则不拼接

<select id="" parameterType="" resultType="">  
    select * from article where 1 = 1  //1=1没有实际作用，只是与第一个and组合，否则第一个语句会多出一个and
    <if test="title != null"> //test里的参数同struts2类似也是通过OGNL表达式方式来获取的，它是从parameterType中获取的
        //test里是可以写方法的 如： test="title!=null &amp;&amp;!&quot;&quot;.equals(title.trim())"  注：&& ""需要转义  &&也可以使用and代替
	或者test改成外面单引号，里面双引号 -->  'title!=null and !"".equals(title.trim())'
       and title = #{title}  
    </if>  
    <if test="content != null">  
       and content = #{content}  
    </if>
    <if test="owner != null">  
       and owner = #{owner}  
    </if>  
</select>  

或：用<where>标签  <where>标签可以自动去掉where语句中的第一个多余的and

<select id="" parameterType="" resultType="">  
    select * from article 
    <where> 
       <if test="title != null">  
          and title = #{title}  
       </if>  
       <if test="content != null">  
          and content = #{content}  
       </if>
       <if test="owner != null">  
          and owner = #{owner}  
       </if> 
    </where> 
</select>  


表示如果传入的title不为null，把and title = #{title}拼接到sql中，其他两个if也是

---------------------------------------------------

<sql>标签
sql片段：
  sql片段就是将sql的部分语句单独定义出来。然后在使用的时候引入。

注：在sql片段中不要包含where

<select id="findUserList" parameterType="cn.bj.mybatis.model.UserQueryVO"  
                                         resultType="cn.bj.mybatis.model.UserCustom">  
    select * from user  
    <!-- where可以自动去掉第一个条件的and -->  
    <where>  
        <!-- sql片段引入 -->  
        <include refid="query_user_where"></include>  
    </where>  
</select>  

<!-- sql片段 -->  
<sql id="query_user_where">  
   <if test="userCustom!=null">  
       <if test="userCustom.sex!=null and userCustom.sex!=''">  
             and t_user.sex=#{userCustom.sex}  
       </if>  
       <if test="userCustom.username!=null and userCustom.username!=''">  
             and t_user.username like '%${userCustom.username}%'  
       </if>  
    </if>  
</sql>  


--------------------------------------------------------------------

<set>标签
当在update语句中使用if标签时，如果前面的if没有执行，则会导致逗号多余错误。
使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。

如：
<!-- 更新学生信息 -->     
<update id="updateStudent" parameterType="StudentEntity">     
    UPDATE STUDENT_TBL      
    <set>     
        <if test="studentName!=null and studentName!='' ">     
            STUDENT_TBL.STUDENT_NAME = #{studentName},      
        </if>     
        <if test="studentSex!=null and studentSex!='' ">     
            STUDENT_TBL.STUDENT_SEX = #{studentSex},      
        </if>     
        <if test="studentBirthday!=null ">     
            STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},      
        </if>     
        <if test="classEntity!=null and classEntity.classID!=null and classEntity.classID!='' ">     
            STUDENT_TBL.CLASS_ID = #{classEntity.classID}    
        </if>     
    </set>     
    WHERE STUDENT_TBL.STUDENT_ID = #{studentID};      
</update>     

--------------------------------------------------------------------
<trim>标签
 trim是更灵活的去处多余关键字的标签，他可以实现where和set的效果。

<!-- 更新学生信息 -->   
<update id="updateStudent" parameterType="StudentEntity">   
    UPDATE STUDENT_TBL    
    <trim prefix="SET" suffixOverrides=",">   //prefix 可以为set和where suffuxOverrides为需要去除的多余的字符 如 , and
        <if test="studentName!=null and studentName!='' ">   
            STUDENT_TBL.STUDENT_NAME = #{studentName},    
        </if>   
        <if test="studentSex!=null and studentSex!='' ">   
            STUDENT_TBL.STUDENT_SEX = #{studentSex},    
        </if>   
        <if test="studentBirthday!=null ">   
            STUDENT_TBL.STUDENT_BIRTHDAY = #{studentBirthday},    
        </if>   
        <if test="classEntity!=null and classEntity.classID!=null and classEntity.classID!='' ">   
            STUDENT_TBL.CLASS_ID = #{classEntity.classID}    
        </if>   
    </trim>   
    WHERE STUDENT_TBL.STUDENT_ID = #{studentID};    
</update>   


--------------------------------------------------------------------

<foreach>标签

<select parameterType="xxx.xx.domain.UserQueryVo" resultMap="...">  
    SELECT * FROM user WHERE CLASS_ID IN   
     <foreach collection="list" item="classIds"  open="("  separator=","  close=")" >  
        #{classIds}  
     </foreach> 
    and name=#{userCustom.name} 
</select>  

foreach元素的属性主要有item，index，collection，open，separator，close。

item表示集合中每一个元素进行迭代时的别名
index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，
open表示该语句以什么开始，
separator表示在每次进行迭代之间以什么符号作为分隔符，
close表示以什么结束，

collection属性，该属性是必须指定的，
但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：   
    如果传入的是单参数且参数类型是一个List的时候，collection属性值为list  
    如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array  
    如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，
      实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，
      所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key 

collection属性追加解释：
要做foreach的对象，作为入参时，List<?>对象默认用list代替作为键，数组对象有array代替作为键，Map对象没有默认的键。
当然在作为入参时可以使用@Param("keyName")来设置键，设置keyName后，list,array将会失效。 

除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：
如果User有属性List ids。入参是User对象，那么这个collection = "ids"
如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = "ids.id"
上面只是举例，具体collection等于什么，就看你想对那个元素做循环。



在包装类中接收多个id
public class UserQueryVo{

  //传入多个id
  private List<Integer> ids;

  get set

  //用户的查询条件
  private UserCustom userCustom;

  public UserCustom getUserCustom(){
     return userCustom;
  }

  public void setUserCustom(UserCustom userCustom){
     this.userCustom=userCustom;
  }

}


测试：
SqlSession sqlSession=sqlSessionFactory.openSession();
//通过mybatis生成Mapper接口的实现类
UserMapper userMapper=sqlSession.getMapper(UserMapper.class);

//创建包装类对象
UserQueryVo userQueryVo=new UserQueryVo();
//传入多个id
List<String> classIds = new ArrayList<String>();
classIds.add("10");
classIds.add("17");
userQueryVo.setIds(classIds);

UserCustom user=new UserCustom();
user.setName("小明");
userQueryVo.setUserCustom(user);

List<UserCustom> list=userMapper.findUserList(userQueryVo);


--------------------------------------------------------------------

choose (when, otherwise)标签
 有时候我们并不想应用所有的条件，而只是想从多个选项中选择一个。MyBatis提供了choose 元素，
按顺序判断when中的条件出否成立，如果有一个成立，则choose结束。当choose中所有when的条件都不满则时，
则执行 otherwise中的sql。类似于Java 的switch 语句，choose为switch，when为case，otherwise则为default。
 
<select id="getStudentListChooseEntity" parameterType="StudentEntity" resultMap="studentResultMap">   
    SELECT * from STUDENT_TBL ST    
    <where>   
        <choose>   
            <when test="studentName!=null and studentName!='' ">   
                    ST.STUDENT_NAME LIKE CONCAT(CONCAT('%', #{studentName}),'%')    
            </when>   
            <when test="studentSex!= null and studentSex!= '' ">   
                    AND ST.STUDENT_SEX = #{studentSex}    
            </when>   
            <when test="studentBirthday!=null">   
                AND ST.STUDENT_BIRTHDAY = #{studentBirthday}    
            </when>   
            <when test="classEntity!=null and classEntity.classID !=null and classEntity.classID!='' ">   
                AND ST.CLASS_ID = #{classEntity.classID}    
            </when>   
            <otherwise>   
                    
            </otherwise>   
        </choose>   
    </where>   
</select>   


--------------------------------------------------------------------

<association>标签
  在多的一方，配置关联的1的一方的信息

<collection>标签 
  在1的一方，配置关联的多的一方的信息
   或者多对多时配置关联的多的一方的信息

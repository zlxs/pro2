主键自增型：

映射文件中，写插入sql时，添加<selectKey>

  <insert id="addUser" parameterType="xxx.xx.domain.User">
   
     <!--
       将插入数据的主键返回，返回到user对象中
       select last_insert_id()得到刚insert进去记录的主键值，只适用于自增主键
       keyProperty:将查询到主键值设置到parameterType指定的对象的哪个属性
       order:select last_insert_id()执行顺序，相对于insert语句来说它的执行顺序
     -->
     <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Integer">
       select last_insert_id()
     </selectKey>
 
     <!--#{}里写对应实体类的属性名 -->
     insert into user(name,password) values(#{name},#{password})
  </insert>


或者直接写在insert标签上：
     <insert id="addUser" useGeneratedKeys="true" keyProperty="userId" parameterType="xxx.xx.domain.User">
	insert into user(name,password) values(#{name},#{password})
     </insert>



非自增型(使用uuid())：


  <insert id="addUser" parameterType="xxx.xx.domain.User">
   
     <!--
       使用mysql的uuid()生成主键
       执行过程：首先通过uuid()得到主键，将主键设置到user对象的id属性中
             其次在insert执行时，从user对象中取出id属性值，再插入
     -->
     <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
       select uuid()
     </selectKey>
 
     insert into user(id,name,password) values(#{id,},#{name},#{password})
  </insert>


通过oracle的序列生成主键：和uuid()类似

<insert id="addUser" parameterType="xxx.xx.domain.User">
  <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
       select 序列名.nextval()
  </selectKey>
  insert into user(id,name,password) values(#{id,},#{name},#{password})
</insert>

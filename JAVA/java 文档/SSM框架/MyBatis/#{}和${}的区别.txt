#{}相当于jdbc中的preparedstatement

${}是输出变量的值


简单说#{}是经过预编译的,是安全的,而${}是未经过预编译的,仅仅是取变量的值,是非安全的,存在sql注入


MyBatis排序时使用order by 动态参数时需要注意，用$而不是#  用#{}会多个''导致sql语句失效.此外还有一个like 语句后也需要用${}


由于${}仅仅是简单的取值,所以以前sql注入的方法适用此处,如果我们order by语句后用了${},那么不做任何处理的时候是存在sql注入危险的.
想要防止这个问题，就得手动处理过滤一下输入的内容,
如判断一下输入的参数的长度是否正常(注入语句一般很长),更精确写查询一下输入的参数是否在预期的参数集合中


字符串替换
默认情况下，使用#{}格式的语法会导致MyBatis创建预处理语句属性并以它为背景设置安全的值（比如?）。
这样做很安全，很迅速也是首选做法，有时你只是想直接在SQL语句中插入一个不改变的字符串。比如，像ORDER BY，你可以这样来使用：
ORDER BY ${columnName}
这里MyBatis不会修改或转义字符串。

重要：接受从用户输出的内容并提供给语句中不变的字符串，这样做是不安全的。这会导致潜在的SQL注入攻击，
因此你不应该允许用户输入这些字段，或者通常自行转义并检查。


如果parameterType传入类型是java.lang.String等基本数据类型：
  则一般用 #{_parameter}获取值，其实#{}里可以随便写什么
  但是 ${}中只能写 value --> ${value} 写其他的不行 

Lucene教程

Analyzer：
分析器，它的作用是把一个字符串按某种规则划分成一个个词语，并去除其中的无效词语
这里说的无效词语是指英文中的“of”、“the”，中文中的“的”、“地”等词语，这些词语在文章中大量出现，
但是本身不包含什么关键信息，去掉有利于缩小索引文件、提高效率、提高命中率。

常用的有StandardAnalyzer分析器,StopAnalyzer分析器,WhitespaceAnalyzer分析器等。


Document:
用户提供的源是一条条记录，它们可以是文本文件、字符串或者数据库表的一条记录等等。
一条记录经过索引之后，就是以一个Document的形式存储在索引文件中的。用户进行搜索，也是以Document列表的形式返回。


Field:
一个Document可以包含多个信息域，例如一篇文章可以包含“标题”、“正文”、“最后修改时间”等信息域，
这些信息域就是通过Field在Document中存储的。Field有两个属性可选：存储和索引。
通过存储属性你可以控制是否对这个Field进行存储；通过索引属性你可以控制是否对该Field进行索引。



Term:
Term是搜索的最小单位，它表示文档的一个词语，term由两部分组成：它表示的词语和这个词语所出现的field。


Tocken:
Tocken是term的一次出现，它包含trem文本和相应的起止偏移，以及一个类型字符串。
一句话中可以出现多次相同的词语，它们都用同一个term表示，但是用不同的tocken，每个tocken标记该词语出现的地方。


Segment:
添加索引时并不是每个document都马上添加到同一个索引文件，它们首先被写入到不同的小文件，
然后再合并成一个大索引文件，这里每个小文件都是一个segment。



IndexWriter:
lucene中最重要的的类之一，它主要是用来将文档加入索引，同时控制索引过程中的一些参数使用。


Directory:
索引存放的位置;lucene提供了两种索引存放的位置，一种是磁盘，一种是内存。
一般情况将索引放在磁盘上；相应地lucene提供了FSDirectory和RAMDirectory两个类。


IndexSearcher:是lucene中最基本的检索工具，所有的检索都会用到IndexSearcher工具


QueryParser: 是一个解析用户输入的工具，可以通过扫描用户输入的字符串，生成Query对象。


Query:查询，lucene中支持模糊查询，语义查询，短语查询，组合查询等等,
如有TermQuery,BooleanQuery,RangeQuery,WildcardQuery等一些类。


Hits:在搜索完成之后，需要把搜索结果返回并显示给用户，只有这样才算是完成搜索的目的。
在lucene中，搜索的结果的集合是用Hits类的实例来表示的。



----------------------------------------------------------------------------------------
如何建索引：
       最简单的能完成索引的代码片断

//建立索引
		//把数据转换为Document的形式
		Document doc=new Document();
		doc.add(new IntField("id",user.getId(),Store.YES));
		doc.add(new StringField("name",user.getName(),Store.YES));
		doc.add(new TextField("discription",user.getDiscription(),Store.YES));
		
		File file=new File("data/index");
		//索引存放的位置;lucene提供了两种索引存放的位置，一种是磁盘，一种是内存。
		Directory directory=FSDirectory.open(file);
		//分析器，它的作用是把一个字符串按某种规则划分成一个个词语，并去除其中的无效词语
		Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_44);
		
		IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_44, analyzer);
		//用来将文档加入索引，同时控制索引过程中的一些参数使用。
		IndexWriter indexWriter=new IndexWriter(directory, config);
		//将这个文档添加到索引中
		indexWriter.addDocument(doc);
		//随后将writer关闭，这点很重要。
		indexWriter.close()
----------------------------------------------------------------------------------------

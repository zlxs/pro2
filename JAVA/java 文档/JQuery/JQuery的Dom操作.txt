$(document).ready(function(){ })  
  页面加载完成执行的函数 （当DOM载入就绪可以查询及操纵时绑定一个要执行的函数）
  可以有多个该方法，与window.onload()有区别：window.onload()是整个文档加载完成才执行，且只能写一个

可以简写成：
$().ready(function(){});

还可以再简化：
$(function(){})

----------------**********----------------
----------------**********----------------
对标签的属性操作： attr() removeAttr() prop() removeProp()

attr()方法：操作元素的属性
获取属性值：
  attr("属性名")方法来获取它的各种属性值
设置属性值：
  $("#aaa").attr(属性，值);//通过attr()方法设置属性值

可以同时设置多个属性值  参数是JSON格式
$("img").attr({ src: "test.jpg", alt: "Test Image" });

--------

removeAttr("属性名")方法： 从每一个匹配的元素中删除一个属性
$("img").removeAttr("src");

--------

prop() 方法设置或返回被选元素的属性和值。
当该方法用于返回属性值时，则返回第一个匹配元素的值。
当该方法用于设置属性值时，则为匹配元素集合设置一个或多个属性/值对

var tag=$("input[type='checkbox']").prop("checked");
返回第一个checkbox的选中情况，选中返回true,否则返回false

$("input[type='checkbox']").prop("自定义属性1", "xxx");
禁用所有页面上的复选框。

--------

removeProp()
用来删除由.prop()方法设置的属性集
$("input[type='checkbox']").removeProp("自定义属性1");

注意：
 1.removeProp()只能删除由prop()方法设置的属性
 2.不要使用该方法来移除诸如 style、id 或 checked selected和disabled之类的 HTML 属性。请使用 removeAttr() 方法代替。
否则这将彻底删除对应的属性，并且，一旦删除之后，你无法再向该DOM元素重新添加对应的属性。

--------

prop()与removeProp()连用：为结点元素添加零时的自定义属性，用完再删除
也可以通过attr()和removeAttr()代替

$(function(){
    $("#b1").click(function(){
        $("#div1").prop("aaa", "xxx"); //为div添加aaa自定义属性
    });
    $("#b2").click(function(){
        alert($("#div1").prop("aaa")); //获取div的aaa自定义属性值  为xxx
        $("#div1").removeProp("aaa");  //删除自定义属性aaa
    });
})

----------------**********----------------
----------------**********----------------

获取标签的value属性值，文本内容

html() //读取和设置某个元素中html内容，可用于xhtml，不能用于xml
text() //读取和设置某个元素中文本内容，可用于xhtml，也能用于xml
val()  //读取和设置某个元素中value属性的值  类似与javaScript中的value 
  参数可以是数组，表示选择多个，但radio标签，必须使用数组作为参数
  $(":radio[name='city']").val(["东京"]);

html()与text()的区别：
如：
<h1 id="aa"><p>Hello Jquery</p></h1>
  alert($("#aa").text());  输出Hello Jquery
  alert($("#aa").html());  输出<p>Hello Jquery</p>

----------------**********----------------
----------------**********----------------

集合遍历each()
---------------

注：jquery对象可以进行隐式迭代：
即 $("p").click(function(){})可以直接迭代，为所有匹配的元素挨个添加click事件，
 而不需要使用迭代方法，为JQuery对象添加其他事件也是一样

---------------

遍历有两种方式：

  选取所有的文本隐藏域，并打印它们的值 <input type="hidden"/>
方法一
  var $hiddenInput=$("input:hidden");
  
  //each()以每一个匹配的元素作为上下文来执行一个函数
  // function的参数 index:每次遍历的索引，从0开始
  // data:当前的对象，在循环中等价于this
  $hiddenInput.each(function(index,data){
    //遍历的时候集合中的每个元素会变成dom对象
    //$(this)是为了把dom对象转成jquery对象，从而可以使用val()方法
    alert($(this).val());
  });
---------------------
方法二
   //JQuery.each(obj,callback);通用的遍历方法，可用于遍历对象和数组
   //只要是JQuery.xxx 调用方法为$.xxx的形势
   //第一个参数 obj:要遍历的对象和数组
   //callback:回调函数
     
   $.each($hiddenInput,function(){
     alert($(this).val()); 
   });
  
--------------------------------
$.trim() 去除字符串前后空格
如 
 var name=$("#username").val();
 var $name=$.trim(name);

--------------------------------
find()方法 
查找当前JQuery对象的指定后代节点，返回值为JQuery对象

--------------------------------
包裹节点：
wrap() 将指定节点用其他标记包裹起来
wrapAll() 将所有匹配的元素用一个元素来包裹
wrapInner() 将每一个匹配的元素的子元素用其他结构化标记包裹起来

$("li").wrap("<font color="red"></font>")

--------------------------------
复制节点：
clone()  //克隆匹配的Dom元素，返回值为克隆后的副本，但此时复制的新节点不具有任何行为
如 var $button2=$("#button1").clone();
 注：需要修改复制元素的id属性，不然会和被复制的属性的id相同
   var $button2=$("#button1").clone();.attr("id","xxx")
如果想要连事件一起克隆，则用clone(true);

----------------**********----------------
----------------**********----------------
替换节点：
replaceWith() //将所有匹配的元素都替换为指定的HTML或DOM元素
如： $("p").replaceWith("<button>保存</button>"); //将所有的p元素替换为<button>保存</button>

replaceAll() //颠倒了replaceWith()方法
  $("p").replaceAll($("button")); //将所有button元素替换p元素  用p来替换所有的button

----------------**********----------------
----------------**********----------------
删除节点：
remove();//自己删除自己
如： $li.remove(); 就把$li这个节点删除了

empty() //删除匹配节点中的所有子节点
如： $("#a").empty();  删除id为a的节点的所有子节点

----------------**********----------------
----------------**********----------------
创建节点：
创建节点方法 如：var $a=$("<p/>"),或var $b=$("<li id='tj' name='tianjin'>天津</li>")   
  $()里加要添加的节点
 动态创建的新节点不会自动添加到文档中

----------------**********----------------
----------------**********----------------
添加节点：
如：添加节点<li id="tj" name="tianjin">天津</li>
//创建节点
  var $li=$("li");
//设置属性
  $li.attr("id","tj");//通过attr()方法设置属性值
  $li.attr("name","tianjin");
//增加文本
  $li.text("天津");
//将新节点添加到原有id为city的节点内，成为它的子节点
  $("#city").append($li);

或直接var $li=$("<li id='tj' name='tianjin'>天津</li>");
      $("#city").append($li);

-----------------
内部插入节点：
1.append() //向匹配节点的内部的结尾添加节点
 $("#city").append(新建节点); 
 $("#city").append("<li>天津</li>");

2.prepend() //向每个匹配的节点的内部开始处插入内容
  $("#city").prepend(新建节点);

3.appendTo()  //将每个匹配的元素追加到指定的元素中的内部结尾处
  新建节点.appendTo($("#city"));

4.prependTo()  //将每个匹配的元素插入到指定的元素中的内部开始处
  新建节点.prependTo($("#city"));

-----------------
外部插入节点：
1.after()  //在每个匹配的元素之后插入内容
2.before()  //在每个匹配的元素之前插入内容
3.insertAfter()  //把所有匹配的元素集合插入到另一个 指定的元素集合的后面
4.insertBefore()  //把所有匹配的元素集合插入到另一个 指定的元素集合的前面

----------------**********----------------
----------------**********----------------

children() //取得一个匹配元素集合中每个元素的所有子元素的集合
next()  //取得一个匹配元素集合中每个元素的后面的紧邻同辈元素的集合
prev()  //取得一个匹配元素集合中每个元素的前面的紧邻同辈元素的集合
siblings（） //取得匹配元素前后所有同辈元素

eq(index)  //获取索引为index的元素，从0开始

parents()  //取得匹配元素的集合的每个元素的唯一父元素的元素集

--------------------------------
样式操作：

追加样式
$("#user").attr("class","xxx") //为id为user的元素，设置class属性值为xxx  即class="xxx"
也可以写成 $("#user").addClass("xxx");

删除样式
$("#user").removeClass("xxx");

切换样式  
控制样式的重复切换，如果类名存在就删除，不存在就添加
$("#user").toggleClass("xxx");

判断是否含有某个样式 hasClass(),有返回true,没有返回false
$("#user").hasClass("xxx");

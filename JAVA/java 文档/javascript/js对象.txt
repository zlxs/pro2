1.Array对象
   JS中的任何类型的数组都是用Array对象表示

创建方法
  a.  var arr=new Array();//无需指定大小
  b.  var arr=new Array(3);//可以指定大小
  c.  var arr=new Array(element0,element1,...);//创建对象时，一并初始化值
      !!!!!!!注意：这里的语法和java不一样，不要写成 new Array(){element1,element2,...}
  
  d.  var arr=[element0,element1,...];//这种更方便 
  
方法
--------------
  1.concat() //连接两个或更多的数组，并返回连接后的新数组。
      eg.  var newArr=arr1.concat(arr2,arr3,...);//参数可以是1个或多个数组 
--------------
  2.join() //把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔  
      eg.  var str=arr1.join(",");
--------------
  3.pop() //删除并返回数组的最后一个元素
      eg.   var last=arr1.pop();
--------------
  4.push() //向数组的末尾添加一个或更多元素，并返回新的长度。
      eg.   var len=arr1.push('x','k',...); //参数可以是一个或多个
--------------
  5.reverse() //颠倒数组中元素的顺序。

--------------
  6.shift() //删除并返回数组的第一个元素

--------------
  7.unshift() //向数组的开头添加一个或更多元素，并返回新的长度。

--------------
  8.sort([compareFunction]) //对数组的元素进行排序

--------------
  9.splice(start,deleteCount,val1,val2,...) //删除元素，并向数组添加新元素。
       从start位置开始删除deleteCount个元素，并从该位置起插入val1,val2
      eg.   var a = [1,2,3,4,5];
            var b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5]  b：[3,4]
--------------
  10.slice(start,end) //返回从原数组中指定开始下标到结束下标之间的项组成的新数组


----------------------------------------------------------------------
----------------------------------------------------------------------
2.Date对象

创建方法
  var date=new Date();

方法
--------------
  1.getDate() //从 Date 对象返回一个月中的某一天 (1 ~ 31)。

--------------
  2.getDay() //从 Date 对象返回一周中的某一天 (0 ~ 6)。 0代表星期天

--------------
  3.getMonth() //从 Date 对象返回月份 (0 ~ 11)。 注意:是从0开始的，得到具体月份要+1

--------------
  4.getFullYear() //从 Date 对象以四位数字返回年份。

--------------
  5.getHours() //返回 Date 对象的小时 (0 ~ 23)。

--------------
  6.getMinutes() //返回 Date 对象的分钟 (0 ~ 59)。

--------------
  7.getSeconds() //返回 Date 对象的秒数 (0 ~ 59)。

--------------
  8.getMilliseconds() //返回 Date 对象的毫秒(0 ~ 999)。

--------------
  9.getTime() //返回 1970 年 1 月 1 日至今的毫秒数。

--------------
  10.把日期格式转化为字符串形式表示
   toString()           //把 Date 对象转换为字符串。 
   toTimeString()       //把 Date 对象的时间部分转换为字符串。
   toDateString()       //把 Date 对象的日期部分转换为字符串。 
   toGMTString()        //请使用 toUTCString() 方法代替。
   toUTCString()        //根据世界时，把 Date 对象转换为字符串。
   toLocaleString()     //根据本地时间格式，把 Date 对象转换为字符串。 
   toLocaleTimeString() //根据本地时间格式，把 Date 对象的时间部分转换为字符串。 
   toLocaleDateString() //根据本地时间格式，把 Date 对象的日期部分转换为字符串。

--------------
  11.设置时间的方法
   setDate() 	     //设置 Date 对象中月的某一天 (1 ~ 31)。
   setMonth()        //设置 Date 对象中月份 (0 ~ 11)。
   setFullYear()     //设置 Date 对象中的年份（四位数字）。
   setYear() 	     //请使用 setFullYear() 方法代替。
   setHours() 	     //设置 Date 对象中的小时 (0 ~ 23)。
   setMinutes()      //设置 Date 对象中的分钟 (0 ~ 59)。
   setSeconds()      //设置 Date 对象中的秒钟 (0 ~ 59)。
   setMilliseconds() //设置 Date 对象中的毫秒 (0 ~ 999)。
   setTime()         //以毫秒设置 Date 对象。 


----------------------------------------------------------------------
----------------------------------------------------------------------
3.Math对象
   无需通过new 来获取对象，直接使用 Math.xx方法就行

方法
--------------
  1.ceil(x) //向上取整  1.2-->2  -1.2-->-1

--------------
  2.floor(x) //向下取整  1.2-->1  -1.2-->-2

--------------
  3.random() //返回 0 ~ 1 之间的随机数。

--------------
  4.round(x) //把数四舍五入为最接近的整数。 1.2-->1  -1.5-->-1  -1.6-->-2 


----------------------------------------------------------------------
----------------------------------------------------------------------
4.RegExp对象  正则表达式

创建方法
  a.  var reg=new RegExp(pattern, attributes);
  b.  var reg=/正则表达式/[attribute]   如 var reg=/^[1-9]*[a-zA-Z]{1,3}$/;

attributes属性为修饰符 
  i 执行对大小写不敏感的匹配。 
  g 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。 
  m 执行多行匹配 


方法
--------------
  1.test() //检索字符串中指定的值。返回 true 或 false。
      匹配字符串是否满足正则表达式  reg.test(str);
--------------
  2.exec() //检索字符串中指定的值。返回找到的值，并确定其位置。

--------------
  3.compile() //编译正则表达式。

--------------
  4.search() //检索与正则表达式相匹配的值。

--------------
  5.match() //找到一个或多个正则表达式的匹配。

--------------
  6.replace() //替换与正则表达式匹配的子串。

--------------
  7.split() //把字符串分割为字符串数组。 



----------------------------------------------------------------------
----------------------------------------------------------------------
5.String对象

创建方法
  a.  var str="xxx";
  b.  var str=new String("xxx");

方法
--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------


--------------




----------------------------------------------------------------------
----------------------------------------------------------------------
6.


----------------------------------------------------------------------
----------------------------------------------------------------------
7.


----------------------------------------------------------------------
----------------------------------------------------------------------
8.



----------------------------------------------------------------------
----------------------------------------------------------------------
9.


----------------------------------------------------------------------
----------------------------------------------------------------------

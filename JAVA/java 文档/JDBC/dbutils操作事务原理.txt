原理：
通过自己传入一个开启事务的连接，来用这个连接完成一系列操作，最后自己关闭这个连接
需要注意，在dao层是不进行业务逻辑处理的，所以很难确保在service层拿到的连接是同一个连接，
这时需要使用ThreadLocal来保存一个连接

ThreadLocal 不是用来解决共享对象的多线程访问问题的，一般情况下，通过ThreadLocal.set() 到线程中的
对象是该线程自己使用的对象，其他线程是不需要访问的，也访问不到的。各个线程中访问的是不同的对象。

每个线程中都有一个自己的ThreadLocalMap类对象，可以将线程自己的对象保持到其中，各管各的，
线程可以正确的访问到自己的对象。

在线程范围内实现数据共享

service层的方法：
public void text(){
try{
			AccountDao dao = new AccountDao();//dao中的链接都是从JdbcUtils中获取的
                        JdbcUtils.startTransaction();//开启事务
			Account a = dao.find(sourceid);
			Account b = dao.find(targetid);
			a.setMoney(a.getMoney()-money);  
			b.setMoney(b.getMoney()+money);   
			dao.update(a); //update
			dao.update(b);//update
			JdbcUtils.commitTransaction();//提交事务
		}finally{
			JdbcUtils.closeConnection();//关闭链接，并从threadlocal中移除链接
		}

}



import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSourceFactory;

public class JdbcUtils {
	private static DataSource ds;
	
	private static ThreadLocal<Connection> tl = new ThreadLocal<Connection>();  //注意是静态的

	static{
		try{
			Properties prop = new Properties();
			InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream("dbcpconfig.properties");
			prop.load(in);
			BasicDataSourceFactory factory = new BasicDataSourceFactory();
			ds = factory.createDataSource(prop);
		}catch (Exception e) {
			throw new ExceptionInInitializerError(e);
		}
	}
	
	public static DataSource getDataSource(){
		return ds;
	}
	
	public static Connection getConnection() throws SQLException{
		try{
			//得到当前线程上绑定的连接
			Connection conn = tl.get();
			if(conn==null){  //代表线程上没有绑定连接
				conn = ds.getConnection();
				tl.set(conn);
			}
			return conn;
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	
	public static void startTransaction(){
		try{
			//得到当前线程上绑定连接开启事务
			//Connection conn = tl.get();
			//if(conn==null){  //代表线程上没有绑定连接
				//conn = ds.getConnection();
				//tl.set(conn);
			//}
			//conn.setAutoCommit(false);
                        getConnection().setAutoCommit(false);
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	
	public static void commitTransaction(){
		try{
			Connection conn = tl.get();
			if(conn!=null){
				conn.commit();
			}
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public static void closeConnection(){
		try{
			Connection conn = tl.get();
			if(conn!=null){
				conn.close();
			}
		}catch (Exception e) {
			throw new RuntimeException(e);
		}finally{
			tl.remove();   //千万注意，解除当前线程上绑定的链接（从threadlocal容器中移除对应当前线程的链接）
		}
	}
}


Dao层：

import java.sql.Connection;
import java.sql.SQLException;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;

import cn.itcast.domain.Account;
import cn.itcast.utils.JdbcUtils;

public class AccountDao {
	
	
	
	public AccountDao() {
		super();
		// TODO Auto-generated constructor stub
	}



	private Connection conn;
	public AccountDao(Connection conn){
		this.conn = conn;
	}
	
	
	public void update(Account a){
		try{
			QueryRunner runner = new QueryRunner();//不通过传入链接池自动获取链接
			String sql = "update account set money=? where id=?";
			Object params[] = {a.getMoney(),a.getId()};
			runner.update(JdbcUtils.getConnection(),sql, params);//传入链接，该链接为当前线程公用的链接
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public Account find(int id){
		try{
			QueryRunner runner = new QueryRunner();
			String sql = "select * from account where id=?";
			return (Account) runner.query(JdbcUtils.getConnection(),sql, id, new BeanHandler(Account.class));
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
}

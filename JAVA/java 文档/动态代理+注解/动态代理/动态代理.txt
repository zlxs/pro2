代理的作用：拦截对真实对象的直接访问
代理对象与真实对象有相同的业务逻辑

注：真实对象要实现代理，就必须实现一个接口

//代理
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
public class LiyuchunProxy {
	
	private Person chunchun = new Liyuchun();
	
	
	//Demo----  Person person = LiyuchunProxy.createProxy();   person.sing(”爱你爱你“)  person.dance();
	public Person createProxy(){
		//第三个参数指定代理的对象干什么事情,第二个参数指定产生谁的代理对象，第一个参数为类装载器
		return (Person) Proxy.newProxyInstance(LiyuchunProxy.class.getClassLoader(), chunchun.getClass().getInterfaces(),new InvocationHandler(){

			/*
			 * proxy:把代理对象自身传递进来
			 * method:代表当前调用的方法
			 * args:调用方法的参数
			 * 
			 */
                        //代理对象调用方法时，会调用invoke方法，判断代理调用的具体方法是什么，再进行处理
			public Object invoke(Object proxy, Method method, Object[] args)
					throws Throwable {
				String methodname = method.getName();
				if(methodname.equals("sing")){
					System.out.println("拿1万刀来！！");
					return method.invoke(chunchun, args);  //谢谢哟！！
				}else if(methodname.equals("dance")){
					System.out.println("拿2万刀来！！");
					return method.invoke(chunchun, args);
				}else{
					System.out.println("春哥不支持这个功能");				
				}
				return null;
			}
			
		});
	}
	
}



//真实对象
public class Liyuchun implements Person {

	public String sing(String name){
		System.out.println("春哥唱"+name+"歌了！！");
		return "谢谢哟！！";
	}
	
	public String dance(String name){
		System.out.println("春哥跳"+name+"舞了!!");
		return "飞吻！！";
	}		
}


public interface Person {

	String sing(String name);

	String dance(String name);

}
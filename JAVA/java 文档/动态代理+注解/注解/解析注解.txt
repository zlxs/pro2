Spring中在方法上加注解就拥有一个对象的原理


import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;

import javax.sql.DataSource;

import com.mchange.v2.c3p0.ComboPooledDataSource;


//利用工厂创建BookDao
public class DaoFactory {

	public static BookDao createBookDao(){
		
		BookDao dao = new BookDao();
		
		//向dao注入一个池
		
		//解析出dao所有属性
		try{
			BeanInfo info = Introspector.getBeanInfo(dao.getClass(),Object.class);//内省javaBean
			PropertyDescriptor pds[] = info.getPropertyDescriptors();//得到属性描述器
			for(int i=0;pds!=null && i<pds.length;i++){
				//得到bean的每一个属性描述器
				PropertyDescriptor pd = pds[i];
				
				Method setMethod = pd.getWriteMethod();  //得到属性相应的set方法
				
				//看set方法上有没有inject 注解
				Inject inject = setMethod.getAnnotation(Inject.class);
				if(inject==null){
					continue;
				}
				
				//方法有注解，则用注解配置的信息，创建一个连接池
				Class propertyType = pd.getPropertyType();//得到属性的类型，以确定创建哪种连接池
				Object datasource = propertyType.newInstance();
				DataSource ds = (DataSource)createDataSourceByInject(inject,datasource);
				
				setMethod.invoke(dao, ds);//为BookDao注入一个连接池，相当于dao.setDs(ds);
			}
		}catch (Exception e) {
			throw new RuntimeException();
		}
		
		return dao;
	}

	//用注解的信息，为池配置属性
	private static Object createDataSourceByInject(Inject inject,Object ds) {
		
		//获取到注解所有属性相应的方法     driverClass url equals hashcode
		Method methods[] = inject.getClass().getMethods();
                //去除无关的方法，如equals,hashcode等
		for(Method m : methods){
			String methodName = m.getName();  //equals  url()  password()
			//反射连接池ds上有没有方法名对应的属性
			PropertyDescriptor pd = null;//属性描述器
			try {
				pd = new PropertyDescriptor(methodName,ds.getClass());//描述ds的类，看ds上有没有methodName这个方法名对应的属性
                  //没有会抛异常，注解的属性和方法名相同，其他类的属性的方法则要带get和set

				Object value  = m.invoke(inject, null);  //得到注解属性的值
				pd.getWriteMethod().invoke(ds, value);
			} catch (Exception e) {
				continue;
			}
		}
		
		return ds;
	}
	
}



import com.mchange.v2.c3p0.ComboPooledDataSource;

import cn.itcast.domain.Book;

public class BookDao {
	
	private ComboPooledDataSource ds;  //class
	
	
	@Inject
	public void setDs(ComboPooledDataSource ds) {
		this.ds = ds;
	}

	public ComboPooledDataSource getDs() {
		return ds;
	}

	public void add(Book book){
	
	}
	
}

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME)
public @interface Inject {

	String driverClass() default "com.mysql.jdbc.Driver";

	String jdbcUrl() default "jdbc:mysql://localhost:3306/bookstore";

	String user() default "root";

	String password() default "root";

}



Spring中在属性上加注解就拥有一个对象的原理


import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import javax.sql.DataSource;

public class DaoFactory2 {
	
	public static BookDao createBookDao(){
		
		BookDao dao = new BookDao();
		
		Field fields[] = dao.getClass().getDeclaredFields();
		for(int i=0;fields!=null && i<fields.length;i++){
			Field f = fields[i];
			f.setAccessible(true);
			Inject inject = f.getAnnotation(Inject.class);
			if(inject==null){
				continue;
			}
			
			//代表当前获取到的字段上有Inject这个注解，则用注解信息，创建一个池赋到字段上
			try{
				//创建字段需要的连接池
				DataSource ds = (DataSource) f.getType().newInstance();  
				
				//用注解的信息，配置上面创建的池
				inject2Datasource(inject,ds);
				
				f.set(dao, ds);
			}catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return dao;
	}

	//用注解的信息，配置池
	private static void inject2Datasource(Inject inject, DataSource ds) {
		Method methods[] = inject.getClass().getMethods();
		for(Method method : methods){
			String name = method.getName();//得到注解的每一方法，例如（jdbcUrl(),user(),password(),toString(),hashcode()）
			
			//获取ds上与方法名相应的属性
			try{
				PropertyDescriptor pd = new PropertyDescriptor(name,ds.getClass());
				Object value = method.invoke(inject, null);   //得到注解属性的值
				
				//把值赋到ds的属性上
				pd.getWriteMethod().invoke(ds, value);
			}catch (Exception e) {
				continue;
			}
			
		}
		
		
	}
	
}



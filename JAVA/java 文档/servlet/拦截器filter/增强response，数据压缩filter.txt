实现全站数据压缩输出，需要增强response，重写response的getWriter和getOutputStream方法，
使servlet调用这两个方法时，得到的是自己的ServletOutputStream 和PrintWriter,在自己的ServletOutputStream 和PrintWriter
中控制数据写入一个缓冲中，而不是直接写给浏览器，之后回到拦截器中时，再从缓冲中取出数据压缩后，调用原来的response写给浏览器

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.zip.GZIPOutputStream;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;

public class GzipFilter implements Filter {

	public void doFilter(ServletRequest req, ServletResponse resp,
			FilterChain chain) throws IOException, ServletException {
		
		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) resp;
		MyResponse myresponse = new MyResponse(response);
		
		//增强getWriter和getOutputStream方法,控制数据不是直接输出给浏览器，而是写入缓冲
		chain.doFilter(request, myresponse);  //response.getwriter  response.getOutputStream  
		
                //放行后还会回到filter中
		//取出缓冲的数据压缩后输出
		byte out[] = myresponse.getBuffer();  //得到目标资源的输出
		System.out.println("压之前：" + out.length);
		
		
		byte gzipout[] = gzip(out);
		System.out.println("压之后：" + gzipout.length);

		
		response.setHeader("content-encoding", "gzip");//告诉浏览器数据是压缩的
		response.setHeader("content-length", gzipout.length + "");//告诉浏览器压缩数据的长度
		response.getOutputStream().write(gzipout);//调用原来的response输出给浏览器
	}
	
        //压缩函数
	public byte[] gzip(byte b[]) throws IOException{
		//将数据写到字节数组缓冲流中
		ByteArrayOutputStream bout = new ByteArrayOutputStream();
		GZIPOutputStream gout = new GZIPOutputStream(bout);
		gout.write(b);
                //确保数据写入缓冲流中
		gout.close();
                //返回压缩后的数据
		return bout.toByteArray();
	}
	
	class MyResponse extends HttpServletResponseWrapper{
		private ByteArrayOutputStream bout = new ByteArrayOutputStream();//缓冲
		private PrintWriter pw;
		
		private HttpServletResponse response;
		public MyResponse(HttpServletResponse response) {
			super(response);
			this.response = response;
		}

                //servlet调用该方法，得到的是替换后的流
		@Override
		public ServletOutputStream getOutputStream() throws IOException {
			return new MyServletOutputStream(bout);    //myresponse.getOutputStream().write("hahah");
		}
		
		@Override
		public PrintWriter getWriter() throws IOException {
			pw = new PrintWriter(new OutputStreamWriter(bout,response.getCharacterEncoding()));
			return pw;  //MyResponse.getWriter().write("中国");
		}

		public byte[] getBuffer(){
                        //确保数据到缓冲流
			if(pw!=null){
				pw.close();
			}
			return bout.toByteArray();
		}
	}
	
	class MyServletOutputStream extends ServletOutputStream{

		private ByteArrayOutputStream bout;
		public MyServletOutputStream(ByteArrayOutputStream bout){
			this.bout = bout;
		}
               //servlet调用write(byte[])方法时，内部会调用此方法
		@Override
		public void write(int b) throws IOException {
			bout.write(b);
		}
		
	}

	public void destroy() {
		// TODO Auto-generated method stub

	}

	
	public void init(FilterConfig filterConfig) throws ServletException {
		// TODO Auto-generated method stub

	}

}
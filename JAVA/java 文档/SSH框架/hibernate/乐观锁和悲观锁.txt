为了提高数据库的效率，我们把事务的级别设置为read committed(可避免脏读)
同时为了解决不可重复读的问题，可以通过两种方式：悲观锁和乐观锁


悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，
所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。
传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。


如果要使用悲观锁，肯定在加载数据时就要锁住，通常采用for update语句
在sql语句最后加for update
如：select * from user where id=3 for update;


hibernate中：一般使用LockMode.UPGRADE

session = HibernateUtils.getSession();  
            tx = session.beginTransaction();  
            A a= (A)session.load(A.class, 1, LockMode.UPGRADE);//加载时上锁
            System.out.println(a.getItemName());  
            a.setQuantity(a.getQuantity()-200);  
            session.update(a);  
            tx.commit();  




乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，
所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。

乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，
在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，
将此版本号一同读出，之后更新时，对此版本号加一。
此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，
如果提交的数据版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。

乐观锁适用于多读的应用类型，这样可以提高吞吐量，
像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。

注解配置乐观锁：
在实体类上添加一个属性private int version;
并在get方法上加一个注解@Version



映射文件中配置乐观锁：

class 描述符添加 optimistic-lock 属性：
<hibernate-mapping>
<class name="cn.xxx.xx.A" table="a" dynamic-update="true"
dynamic-insert="true" optimistic-lock="version">
……
</class>
</hibernate-mapping>

optimistic-lock 属性有如下可选取值： 
none：无乐观锁 
version：通过版本机制实现乐观锁 
dirty：通过检查发生变动过的属性实现乐观锁 
all：通过检查所有属性实现乐观锁 
其中通过 version 实现的乐观锁机制是 Hibernate 官方推荐的乐观锁实现，
同时也是 Hibernate 中，目前唯一在数据对象脱离 Session 发生修改的情况下依然有效的锁机制。
因此，一般情况下，我们都选择 version 方式作为 Hibernate 乐观锁实现机制。 
Spring整合Hibernate事务过程详解：
1.在Service层方法开始之前
  获取Session
  把Session和当前线程绑定,这样就可以在Dao中使用SessionFactory的
    getCurrentSession()方法来获取Session
  开启事务
2.若方法正常结束，没有出现异常，则
  提交事务
  使和当前线程绑定的Session解除绑定
  关闭Session
3.若方法出现异常，则
  回滚事务
  使和当前线程绑定的Session解除绑定
  关闭Session


spring配置文件中需要配置的信息：


<!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、
      @Component等注解的类成为spring的bean -->
<context:component-scan base-package="xx.xxx"></context:component-scan>

<!--配置数据源-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
  <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
  <property name="username" value="root"></property>
  <property name="password" value="root"></property>
</bean>

<!--Spring整合Hibernate的事务管理器-->
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
   <property name="sessionFactory" ref="sessionFactory" />
</bean>

<!--配置hibernate的本地会话工厂bean，很重要-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
  <!--配置数据源-->
  <property name="dataSource">
     <ref bean="dataSource" />
  </property>
  <!--配置hibernate的相关属性-->
  <property name="hibernateProperties">
     <props>
       <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
       <prop key="hibernate.hbm2ddl.auto">update</prop>
       <prop key="hibernate.show_sql">true</prop>
    </props>
  </property>
  <!--也可以把hibernate配置文件引入进来-->
  <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>

  <!--配置映射文件地址，与下面的配置映射文件目录集方式 2选1
  <property name="mappingResources">
    <list>
      <value>xxx/xx/dao/Customer.hbm.xml</value>
    </list>
  </property>	
  -->
  <!--映射文件目录位置集 -->
  <property name="mappingDirectoryLocations">
    <list>
      <value>xxx/xx/dao</value>
    </list>
  </property>
  <!--如果hibernate使用注解配置的话，使用下面的配置方法-->
  <property name="annotatedClasses">
     <list>
        <!--value内为实体类的全类名-->
	<value>my.ssh.domain.User</value>
     </list>
  </property>	
</bean>

<!-- 事务通知 ,依赖于事务管理器,事务行为-->
<tx:advice id="txadvice" transaction-manager="transactionManager">
  <!-- 事务属性集 -->
  <tx:attributes>
    <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
    <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/><tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
    <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
  </tx:attributes>
</tx:advice>
	
<!--aop配置  -->
<aop:config>
  <aop:pointcut expression="execution(* *..*Service.*(..))" id="txPointcut"/>
  <!-- 切入点通知（既包含通知，也包含切入点） -->
  <aop:advisor advice-ref="txadvice"  pointcut-ref="txPointcut"/>
</aop:config>

<!--启用事务注解，用注解就不用配上面两项-->
<tx:annotation-driven transaction-manager="transactionManager" /></beans>


<bean id="customerImpl" class="xxx.xx.dao.CustomerDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>


hibernate实体类的映射文件：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <class name="xxx.xx.dao.Customer" table="customer">
        <id name="id" column="id" type="integer" >   
            <generator class="increment" />   
        </id>
        <property name="username" column="name" type="string" />
        <property name="password" column="password" type="string" ></property>
    </class>
</hibernate-mapping>

@Entity
public class Customer {
	private int id;	
        private String username;
	private String password;
	@Id
	@GeneratedValue
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	@Column
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	@Column
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}	
}
dao接口：
public interface CustomerDao {
	public void add(Customer c);	
	public Customer findById(int id);
}
dao实现类：
@Repository
public class CustomerDaoImpl implements CustomerDao {
	
        //private HibernateTemplate hibernateTemplate;不推荐通过Spring提供的这个类操作hibernate
	@Autowired
        private SessionFactory sessionFactory; //通过Spring自动注入该属性    
        @Transactional(propagation=Propagation.REQUIRED,readOnly=false,isolation=Isolation.DEFAULT)
	public void add(Customer c) {		
		sessionFactory.getCurrentSession().save(c);		
	}
	@Transactional(propagation=Propagation.REQUIRED,readOnly=true,isolation=Isolation.DEFAULT)
	public Customer findById(int id) {		
		return sessionFactory.getCurrentSession().get(Customer.class, id);
	}    	
}
-------------------------------------------------------------------------------

spring在service层实现事务管理的方式之一：编程式事务管理，通过模版类TransactionTemplate
但在实际中使用的是aop机制，即用环绕通知方式实现事务管理

<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
  <property name="transactionManager" ref="transactionManager"></property>
</bean>

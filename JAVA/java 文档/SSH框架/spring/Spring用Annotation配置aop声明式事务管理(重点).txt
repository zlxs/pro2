事务管理
@Transactional 事务注解 加在方法上或类上

propagation属性 用于指定事务的传播行为,默认为Propagation.REQUIRED 
isolation属性 用于指定事务隔离级别
readOnly属性 指定是否对数据库只进行读操作，用于数据库优化
timeout属性 指定强制回滚前事务可以占用的时间，防止一个事务占用连接太久，影响系统性能
rollbackFor/rollbackForClassName属性 指定对哪些异常进行回滚，通常不需要配置，取默认值即可,对应
  的还有noRollbackFor/noRollbackForClassName,默认情况下Spring的声明式事务对所有的运行时异常进行回滚
 如：noRollbackFor="MyException.class" 指不对该异常进行回滚操作

--------------------------
事务的传播行为propagation属性取值：
1.Propagation.REQUIRED  
  表示当前方法必须运行在一个事务中。若一个现有的事务正在进行中，在方法将会运行
在这个事务中，否则的话就要开一个新事务

2.Propagation.REQUIRES_NEW  
  表示当前方法必须运行在它自己的事务里，它将启动一个新事务。
如果一个现有的事务正在运行的话，将在这个方法运行期间被挂起。
若使用jtaTransactionManager.则需要访问jtatansactionManager
 
3.Propagation.SUPPORTS
  当前方法不需要事务处理环境，但如果有一个事务已经在运行得到话，
这个方法也可以在这个事务里运行 

4.Propagation.NOT_SUPPORTED
  表示该方法不应该在事务中运行，如果一个现有的事务正在运行，他将在该方法的运行期间被
挂起，如果使用jta的事务管理器，需要访问jtatansactionManager

5.Propagation.NEVER
  当前的方法不应该运行在一个事务上下文中，如果当前存在一个事务，则抛出一个异常

6.Propagation.MANDATORY
  该方法必须运行在一个事务中，如果当前事务不存在，将抛出一个异常

7.Propagation.NESTED
  若当前已经存在一个事务，则该方法应当运行在一个嵌套的事务中。被嵌套的事务可以从
当前事务中单独的提交或回滚。若当前事务不存在，则看起来就和Propagation.REQUIRED一样
--------------------------
事务隔离级别isolation属性取值：
 Isolation.DEFAULT
 Isolation.READ_UNCOMMITTED
 Isolation.READ_COMMITTED
 Isolation.REPEATABLE_READ
 Isolation.SERIALIZABLE
--------------------------

需要配置Spring的ApplicationContext.xml

<!--数据源配置-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
  <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
  <property name="username" value="root"></property>
  <property name="password" value="root"></property>
</bean>
<!--配置jdbc事务管理器-->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <property name="dataSource" ref="dataSource" />
</bean>

<!--启用事务注解-->
<tx:annotation-driven transaction-manager="transactionManager" />

-------------------------------------------------------------------------
Spring整合Hibernate时的事务配置


<!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、
      @Component等注解的类成为spring的bean -->
<context:component-scan base-package="xx.xxx"></context:component-scan>

<!--配置HibernateTemplate,Spring提供给我们操作hibernate的模版类（封装hibernate的样板代码)
  强烈不推荐使用HibernateTemplate，而推荐直接用sessionFactory，HibernateTemplate只支持hibernate3,
  hibernate4已经废除,并且使用它会把dao层和Spring api耦合在一起，知道有这个类就好
-->*******************不推荐使用HibernateTemplate,而用sessionFactory*********************
<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" >
  <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<!--Spring为整合hibernate使用的事务管理器-->
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
   <property name="sessionFactory" ref="sessionFactory" />
</bean>

<!--数据源配置-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
  <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
  <property name="username" value="root"></property>
  <property name="password" value="root"></property>
</bean>

<!--hibernate的本地会话工厂bean配置-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
   <!--配置数据源-->
   <property name="dataSource">
      <ref bean="dataSource" />
   </property>
   <!--配置hibernate相关属性-->
   <property name="hibernateProperties">
     <props>
	<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	<prop key="hibernate.hbm2ddl.auto">update</prop>
	<prop key="hibernate.show_sql">true</prop>
     </props>
  </property>
  <!--也可以把hibernate配置文件引入进来-->
  <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>

  <!--配置映射文件地址，与下面的配置映射文件目录集方式 2选1
  <property name="mappingResources">
    <list>
      <value>xxx/xx/dao/Customer.hbm.xml</value>
    </list>
  </property>	
  -->
  <!--映射文件目录位置集 -->
  <property name="mappingDirectoryLocations">
    <list>
      <value>xxx/xx/dao</value>
    </list>
  </property>
  <!--如果hibernate使用注解配置的话，使用下面的配置方法-->
  <property name="annotatedClasses">
     <list>
        <!--value内为实体类的全类名-->
	<value>my.ssh.domain.User</value>
     </list>
  </property>

</bean>

<!--启用事务注解-->
<tx:annotation-driven transaction-manager="transactionManager" /></beans>

用配置文件的方式配置声明式事务管理

使用环绕通知实现事务管理：
spring提供给我们的 TransactionProxyFactoryBean 这个事务代理工厂bean 封装了实现事务管理的环绕通知

事务属性：

1.传播行为：
传播规则回答了一个问题，就是新的事务是否要被启动或是挂起，或者方法是否要在
事务的环境中运行

PROPAGATION_MANDATORY
  该方法必须运行在一个事务中，如果当前事务不存在，将抛出一个异常

PROPAGATION_NESTED
  若当前已经存在一个事务，则该方法应当运行在一个嵌套的事务中。被嵌套的事务可以从
当前事务中单独的提交或回滚。若当前事务不存在，则看起来就和PROPAGATION_REQUIRE一样

PROPAGATION_NEVER
  当前的方法不应该运行在一个事务上下文中，如果当前存在一个事务，则抛出一个异常

PROPAGATION_NOT_SUPPORTED
  表示该方法不应该在事务中运行，如果一个现有的事务正在运行，他将在该方法的运行期间被
挂起，如果使用jta的事务管理器，需要访问jtatansactionManager

PROPAGATION_REQUIRED
  表示当前方法必须运行在一个事务中。若一个现有的事务正在进行中，在方法将会运行
在这个事务中，否则的话就要开一个新事务

PROPAGATION_REQUIRED_NEW
  表示当前方法必须运行在它自己的事务里，它将启动一个新事务。如果一个现有的事务正在运行
的话，将在这个方法运行期间被挂起。若使用jtaTransactionManager.则需要访问jtatansactionManager

PROPAGATION_SUPPORTS
  当前方法不需要事务处理环境，但如果有一个事务已经在运行得到话，
这个方法也可以在这个事务里运行 

2.隔离级别
ISOLATION_DEFAULT  使用后端数据库默认是隔离级别
ISOLATION_READ_UNCOMMTED
ISOLATION_RREAD_COMMITED
ISOLATION_REPEATABLE_READ
ISOLATION_SERIALABLE

3.事务超时
当达到一定时间后未提交，就会回滚事务

4.只读
若对数据库只进行读操作，可以设置事务只读的属性 readOnly
  作用是优化

5.回滚规则


配置事务管理：
使用tx和aop名词空间来简化配置声明式事务：
	
<!--配置HibernateTemplate,Spring提供给我们操作hibernate的模版类（封装hibernate的样板代码)
  强烈不推荐使用HibernateTemplate，而推荐直接用sessionFactory，HibernateTemplate只支持hibernate3,
  hibernate4已经废除,并且使用它会把dao层和Spring api耦合在一起，知道有这个类就好
-->*******************不推荐使用HibernateTemplate,而用sessionFactory*********************
<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" >
  <property name="sessionFactory" ref="sessionFactory"></property>
</bean>

<!--配置数据源-->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
  <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
  <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
  <property name="username" value="root"></property>
  <property name="password" value="root"></property>
</bean>

<!--Spring整合Hibernate的事务管理器-->
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
   <property name="sessionFactory" ref="sessionFactory" />
</bean>

<!--配置hibernate的本地会话工厂bean，很重要-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
  <!--配置数据源-->
  <property name="dataSource">
     <ref bean="dataSource" />
  </property>
  <!--配置hibernate-->
  <property name="hibernateProperties">
     <props>
       <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
       <prop key="hibernate.hbm2dl_auto">update</prop>
       <prop key="hibernate.show_sql">true</prop>
    </props>
  </property>

  <!--配置映射文件地址，与下面的配置映射文件目录集方式 2选1
  <property name="mappingResources">
    <list>
      <value>xxx/xx/dao/Customer.hbm.xml</value>
    </list>
  </property>	
  -->
  <!--映射文件目录位置集 -->
  <property name="mappingDirectoryLocations">
    <list>
      <value>xxx/xx/dao</value>
    </list>
  </property>

  <!--如果hibernate是用的注解的话，就用下面方式配置-->
  <property name="annotatedClasses">
     <list>
        <!--value内为实体类的全类名-->
	<value>my.ssh.domain.User</value>
     </list>
  </property>
	
</bean>
	
<!-- 事务通知 ,依赖于事务管理器,事务行为-->
<tx:advice id="txadvice" transaction-manager="transactionManager">
  <!-- 事务属性集 -->
  <tx:attributes>
    <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
    <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
    <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
    <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
    <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>
  </tx:attributes>
</tx:advice>
	
<!--aop配置  -->
<aop:config>
  <aop:pointcut expression="execution(* *..*Service.*(..))" id="txPointcut"/>
  <!-- 切入点通知（既包含通知，也包含切入点） -->
  <aop:advisor advice-ref="txadvice"  pointcut-ref="txPointcut"/>
</aop:config>
     
--------------------------------------------------------------------------------
建议dao层使用hiberrnate时，直接用SessionFactory,不用HibernateTemplate
降低dao与spring api的耦合

如：CustomerDaoImpl：

public calss CustomerDaoImpl implements CustomerDao{
   private SessionFactory sessionFactory;
   public SessionFactory  getSessionFactory(){
     return sessionFactory;
   }
   public void setSessionFactory(SessionFactory sessionFactory){
     tis.sessionFactory=sessionFactory;
   }
   public Customer findById(int id){
     return (Customer)sessionFactory.getCurrentSession().get(Customer.class,id);
   }
}

在配置文件中配置CustomerDaoImpl
<bean id="customerImpl" class="xxx.xx.dao.CustomerDaoImpl">
   <property name="sessionFactory" ref="sessionFactory"></property>
</bean>
而不是使用下面的配置
<bean id="customerImpl" class="xxx.xx.dao.CustomerDaoImpl">
   <property name="hibernateTemplate" ref="hibernateTemplate"></property>
</bean>

--------------------------------------------------------------------------------

原始方式配置事务管理：（一般不用这种了，用注解方式和上面的比较方便）
	
        <!--配置HibernateTemplate,Spring提供给我们操作hibernate的模版类（封装hibernate的样板代码)-->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" >
	  <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

        <!--配置数据源-->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="url"
			value="jdbc:mysql://localhost:3306/spring">
		</property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>
	</bean>

        <!--会话工厂bean，很重要-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.hbm2dl_auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>

	<!--配置映射文件地址，与下面的配置映射文件目录集方式 2选1
                <property name="mappingResources">
	          <list>
	            <value>xxx/xx/dao/Customer.hbm.xml</value>
	          </list>
	        </property>	
	-->
	<!--映射文件目录位置集 -->
	<property name="mappingDirectoryLocations">
	   <list>
	      <value>xxx/xx/dao</value>
	   </list>
	</property>
	
	</bean>
	
        <!--目标对象-->
	<bean id="customerServiceTarget" class="xxx.xx.dao.CustomerServiceImpl">
	   <property name="dao" ref="customerImpl"></property>
	</bean>
	
	<!--customerServiceTarget的代理对象 ，TransactionProxyFactoryBean事务代理工厂bean不需要配置拦截器名集，它内置了事务管理的拦截器-->
	<bean id="customerService" 
	  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
	   <!-- 代理接口集 -->
	   <property name="proxyInterfaces">
	     <list>
	       <value>xxx.xx.dao.CustomerService</value>
	     </list>
	   </property>
	   <!-- 目标对象 -->
	   <property name="target" ref="customerServiceTarget"></property>
	   <!-- hibernate事务管理器 是实现事务管理的核心-->
	   <property name="transactionManager" ref="transactionManager"></property>
	   <!-- 配置事务属性集 -->
	   <property name="transactionAttributes" >
	     <props>
	       <prop key="save*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="update*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="delete*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="load*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="get*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="find*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	     </props>
	   </property>
	</bean>

        <!--spring的hibernate事务管理器-->
        <bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
------------------------------------------------------------
 对多个service配置相同的事务属性，可以专门把事务代理工厂定义出来，具体的service代理bean再
去继承它

       <!--抽象事务代理工厂bean（专门为继承而用）-->
	<bean id="abstractTx" 
	      abstract="true"  //表示不会实例化这个bean,是用来专门为继承而用的
	      lazy-init="true"
	  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
	   <!-- hibernate事务管理器 是实现事务管理的核心-->
	   <property name="transactionManager" ref="transactionManager"></property>
	   <!-- 事务属性集 -->
	   <property name="transactionAttributes" >
	     <props>
	       <prop key="save*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="update*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="delete*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	       <prop key="load*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="get*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="find*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</prop>
	       <prop key="*">PROPAGATION_REQUIRED,ISOLATION_DEFAULT</prop>
	     </props>
	   </property>
	</bean>
	
	<!-- 使用继承简化aop配置 -->
	<bean id="customerService" parent="abstractTx">
	 <!-- 代理接口集 -->
	   <property name="proxyInterfaces">
	     <list>
	       <value>xxx.xx.dao.CustomerService</value>
	     </list>
	   </property>
	<!-- 目标对象 -->
	   <property name="target" ref="customerServiceTarget"></property>
	</bean>
	
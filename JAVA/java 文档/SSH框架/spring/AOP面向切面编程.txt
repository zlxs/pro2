
切面aspect：实现的交叉功能 ，如日志记录，权限管理   切面=通知+切入点

通知advice：是切面的实际实现，更加具体(细化)  抽出来的组件

连接点joinpoint：(可以)应用切面的地点但还没有真正应用，方法调用，异常抛出，修改的字段，
     以方法为单位，每个方法有5个连接点，就是5种通知运用的位置 调用前，调用后，调用后返回值后，调用后抛出异常后，环绕方法

切入点pointcut：正真的将通知应用到目标程序中的地点(在哪里切)，一定是连接点，切入点是连接点的子集

引入：不改变源代码，为类增加新的属性与方法

目标对象：被通知的对象，可以是任何类

代理：将通知应用到目标对象后，创建一个崭新的对象，则该对象为代理对象，系统不需要为了
  支持代理对象而发生改变（透明）

织入weave：创建代理对象的过程
   编译期织入：当把java源代码编译成字节码时，将通知织人，需要特殊的编译器(javac不行)
   类装载期织入：当把java类载入到jvm中时，将通知织入，需要特殊的classLoader
   运行期织入：切面在应用系统运行时织入

aop:不改变源代码，还为类增加新功能，核心机制是代理

spring在运行期创建代理
 spring两种代理方式：
 1.若目标对象实现若干接口，spring使用java.lang.reflect.Proxy类代理

 2.目标对象未实现接口，spring使用CGLIB库生成目标对象的子类
   final方法不能代理，因为不能被重写



Advice通知	从多个组件中抽出的需要被复用的代码或功能，也即切面需要做的操作。
Weave织入	将Advice中的功能，应用到各组件的过程。
JoinPoint连接点	以方法为单元，定义Advice可以织入的点（before,after,after-return,after-throw,around）
PointCut切入点	用表达式定义一组 Join Point的集合。
Aspect切面	声明一个切面，是一组关注点的模块化。Aspect = Advice + PointCut



用spring实现简单的aop:在某个类方法执行前，输出hello

public interface HelloService {
    public void  myMetod();
}

public class HelloServiceImpl implements HelloService{
	@Override
	public void myMetod() {
		System.out.println("haha!!");	
	}	
}

实现MethodBeforeAdvice接口，进行前置通知
public class MyProxy implements MethodBeforeAdvice{
	@Override
	public void before(Method arg0, Object[] arg1, Object arg2)
			throws Throwable {
		System.out.println("hello!");
	}
}

配置：
 <!-- 目标对象   约定id最后加Target -->
  <bean id="helloServiceImplTarget" class="xxx.xx.xxx.HelloServiceImpl">     
  </bean>
  
  <!-- 前置通知 -->
  <bean id="myProxy" class="xxx.xx.xxx.MyProxy">
  </bean>
  
  <!-- 代理对象 -->
  <bean id="helloServiceImpl" class="org.springframework.aop.framework.ProxyFactoryBean">
    <!-- 代理接口集 -->
    <property name="proxyInterfaces">
      <list>
        <value>xxx.xx.xxx.HelloService</value>       
      </list>
    </property>
    <!-- 拦截器名集 -->
    <property name="interceptorNames">
      <list>
        <value>myProxy</value>
      </list>
    </property>
    <!-- 指定目标对象 -->
    <property name="target" ref="helloServiceImplTarget"></property>
  </bean>


class Test{
    public static void main(String[] args) {
	ApplicationContext  ac=new ClassPathXmlApplicationContext("applicationContext.xml"); 
	HelloService a=(HelloService)ac.getBean("helloServiceImpl");//获取代理对象，转成相应的接口类型
	a.myMetod();
    }
} 

打印：
Hello!
haha!!

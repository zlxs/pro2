表单：
使用struts2的表单标签，不需要像strut1那样额外加error标签，
因为struts2的表单标签已经绑定了错误信息，只需要在addFieldError方法
中把第一个参数设置为对应表单标签的name属性的值即可绑定在一起

register.jsp:

<%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%>
<%@ taglib uri="/struts-tags" prefix="s" %>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
  </head>  
  <body>
   <s:form action="testAction" namespace="/">
      <s:textfield name="name" label="用户名"></s:textfield>
      <s:textfield name="age" label="年龄"></s:textfield>
      <s:submit value="提交"></s:submit>
   </s:form>
  </body>
</html>

提交给TestAction处理，TestAction继承ActionSupport
    重写validate方法

public class TestAction extends ActionSupport{
	private String name;
	private String age;
	public String getAge() {
		return age;
	}
	public void setAge(String age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String execute(){
		return "success";
	}
	@Override
	public void validate() {
		if(name==null||name.trim().equals("")){
			addFieldError("name","用户名不能为空");
		}
		if(age==null||age.trim().equals("")){
			addFieldError("age","年龄不能为空");
		}
	}
}
action配置：
<action name="testAction" class="xxx.xx.Action.TestAction">
        <result name="success" type="dispatcher">/success.jsp</result>
        <!--input是validate验证未通过时默认跳转的页面，一定要配置-->
        <result name="input">/register.jsp</result> 
</action>



还有一个addActionError方法，是用来验证逻辑错误的，如密码和确认密码是否一致等
需要加标签<s:actionerror>来显示错误提示

------------------------------------------------------------------------------
注：如果表单jsp是从提供校验方法的action（即表单提交地址action）的另一个
方法跳转过来的，validate也会去校验，这样就不太好了（还未填信息，就在页面上打印错误提示），
这时可以使用@SkipValidate注解添加在action的跳转到表单页面方法上，就会阻止
调用这个方法时校验

        @SkipValidation
	public String toReg(){
		return "register";//访问这个方法，跳转到注册表单时就不会校验了
	}
	@Override
	public void validate() {
		if(name==null||name.trim().equals("")){
			addFieldError("name","用户名不能为空"); //国际化时，可以用getText("login.notnull");
                        //addFieldError("name",getText("login.notnull"));//在国际化资源文件中要定义好login.nutnull
		}
		if(age==null||age.trim().equals("")){
			addFieldError("age","年龄不能为空");
		}
	}



或在validate()方法名上加要校验的方法名 --> validateXxx()

访问http://localhost:8080/TestStruts2/testAction!toreg
找action的toreg方法处理请求，然后跳转到注册页面，该方法不会触发表单验证
然后表单提交时去找reg方法，reg执行时会验证表单
<s:form action="testAction!reg" namespace="/"> //提交给reg方法
      <s:textfield name="name" label="用户名"></s:textfield>
      <s:textfield name="age" label="年龄"></s:textfield>
      <s:submit value="提交"></s:submit>
</s:form>

	public String reg(){  //不用execute方法，而用具体的方法名
		return "success";
	}
	
	public String toreg(){
		return "register";
	}
	/*-------------------validateXxx()----------------------*/
	public void validateReg() { //validate方法后加reg方法名，注意第一个字母大写
		if(name==null||name.trim().equals("")){
			addFieldError("name","用户名不能为空");
		}
		if(age==null||age.trim().equals("")){
			addFieldError("age","年龄不能为空");
		}
	}


还可以在action的配置中，单独配置表单验证拦截器的属性

----------------------------------------------------------------------

验证框架
声明式验证需要引入验证框架

验证框架的配置文件: action对象的名称-validation.xml
如：RegisterAction-validation.xml 放在对应action同包下

这里说明一下 validate xml验证的规则
<field name=""></field>  //自动校验器
<validator type=""></validator>	//非自动校验器

验证规则：
requiredstring  验证是属性是否为("")   不需要设置参数
required   验证是属性是否为(null) 不需要设置参数
int  	验证属性是否为整数 可以这是在什么数之间 需要参数 (min,max)
stringlength  验证字符串的长度   可以设置字符串需要的长度 需要参数(minLength,maxLength)
date	验证对象是否在某时段  可以设置时间段 需要参数(min,max)
regex	使用正则验证
email   验证是否符合邮件格式


<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE validators PUBLIC   
  "-//OpenSymphony Group//XWork Validator 1.0.2//EN"   
  "http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd">  
<validators>  
      
    <field name="username">
       <field-validator type="requiredstring"> 
         <param name="trim">true</param>  
         <message>用户名不能为空!</message>  
       </field-validator>  
    </field>
    
    <field name="password">
       <field-validator type="requiredstring"> 
         <param name="trim">true</param>  
         <message>密码不能为空!</message>  
       </field-validator>  
       <field-validator type="stringlength">  
         <param name="minLength">6</param>  
         <param name="maxLength">10</param>  
        <message>密码在${minLength}到${maxLength}位之间</message>  
       </field-validator> 
    </field>  
    
    
     <field name="confirmpassword">
       <field-validator type="requiredstring"> 
         <param name="trim">true</param>  
         <message>确认密码不能为空!</message>  
       </field-validator>  
       <field-validator type="fieldexpression" short-circuit="true">
	     <param name="expression"><![CDATA[(#parameters.password == #parameters.confirmpassword)]]></param>  //OGNL表达式
	     <message>密码不一致，请重新输入。</message>
  	   </field-validator> 
    </field>  
  
    <field name="age">  
        <field-validator type="required">  
          <message>工龄不能为空</message>  
        </field-validator>  
  
        <field-validator type="int">  
          <param name="min">1</param>  
          <param name="max">80</param>  
          <message>工龄需要在${min}到${max}之间</message>  
        </field-validator>  
    </field>  
  
    <field name="birthday">  
        <field-validator type="required">  
          <message>生日不能为空</message>  
        </field-validator>  
  
        <field-validator type="date">  
          <param name="min">1990-10-10</param>  
          <param name="max">2011-3-14</param>  
       	  <message>生日需要在 ${min}到${max}范围内 </message>  
        </field-validator>  
    </field>  
</validators>  



public class RegisterAction extends ActionSupport {  
        private String username;  
        private String password;  
        private String confirmpassword;  
        private int age;  
        private Date birthday;  
       set get
}

--------------------------------------
jsp显示错误信息：
<s:fielderror fieldName="key" theme="simple" ></s:fielderror>
如果表单的主题theme是xhtml的话，会默认显示出来的，不用写上面的标签，但显示的位置不太好，
所以我们需要把theme改为simple,在自己想要显示错误信息的地方写标签来显示错误信息

--------------------------------------


也可以把验证错误提示用国际化显示：
把message里的内容写到资源文件中 
RegisterAction properties
//key和value自定义
error.empty.name=name is required!
error.length.name=name's length must between ${minLength} and ${maxLength}


<field-validator type="stringlength">  
        <param name="minLength">6</param>  
        <param name="maxLength">10</param>  
        <message key="error.length.name" />  //这么写
 </field-validator>  


在客户端校验需要把s:form 的validate属性设置为true,同时需要把theme设置为xhtml，否则客户端校验无效

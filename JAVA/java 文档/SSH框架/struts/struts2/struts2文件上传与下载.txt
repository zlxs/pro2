
在Action中加个属性 private File file;和set get方法  java.io下的File类

在页面中加struts2的标签<s:file name="file(action中对应的属性名)" label="上传文件" />
这个标签同时会得到上传文件的名称和类型，可以封装到action的对应属性中

注意：form的提交方式改为post  表单的enctype属性必须设置为 enctype="multipart/form-data"

在Action中添加属性 命名为 对应上传文件的属性名+FileName/ContentType
private String fileFileName;   文件名包含后缀
private String fileContentType;
再加上set 和get方法
就会自动把上传文件的名称和类型保存在对应属性中

-------------------------------------------------------------
注：如果是上传多个文件，则需要把上述3个属性全设置为数组
-------------------------------------------------------------
上传的文件保存为零时文件，需要读取出来保存到指定的目录下

	public String execute(){
		//得到在webroot下新建文件夹upload的绝对路径
		String path=ServletActionContext.getServletContext().getRealPath("/upload");
		/*确保上传文件夹被创建，一般部署到tomcat中时会自动创建webroot下的文件夹的
		File fpath=new File(path);
		if(!fpath.exists()){
			fpath.mkdirs();
		}
		*/
                //创建一个在upload目录下的指定地址和名称的文件,用于保存上传的文件		
		File f=new File(path,fileFileName);//这里还是原来的名称，地址是在upload文件夹下
		//把上传文件以新的文件形式保持到指定地址
		file.renameTo(f);		
		return "success";
	}

保存文件也可以使用commons-io包的FileUtils工具类来完成，copyFile(srcFile,destFile);



如果想限制上传文件的格式和大小，可以通过配置文件实现
 <action name="testUploadAction" class="xxx.xx.Action.TestUploadAction">
        <result name="success" type="dispatcher">/success.jsp</result>
        <result name="input">/upload.jsp</result>
        <interceptor-ref name="defaultStack">
          <!--表示只能上传指定后缀的文件-->
          <param name="fileUpload.allowedExtensions">.txt,.jpg</param> 
          <!--设置上传文件的内容类型，通过下面这种方式，可避免别人把其他类型文件后缀修改为能上传的后缀文件
           欺骗性质的上传-->
          <param name="fileUpload.allowedType">text/plain,image/pjpeg,image/jpeg</param>
          <!--设置上传文件大小的最大值-->
          <param name="fileUpload.maximumSize">120000</param>//单个文件的最大大小，单位为字节
        </interceptor-ref>
 </action>

---------
上传其他后缀的文件会在上传页面上给出错误提示，但是struts2自带的提示不怎么好
需要我们自己配置提示信息


为该action写一个资源文件（一般为国际化资源文件），资源文件放在src目录下
  在struts.xml文件中配置
<constant name="struts.custom.i18n.resources" value="资源文件前缀名"></constant>


资源文件：
struts.messages.error.file.too.large=  
struts.messages.error.uploading= 
struts.messages.error.content.type.not.allowed=


在action中再加一个参数：
<!--指定使用action相关消息文件-->
<param name="fileUpload.useActionMessage">true</param>


--------------------------------------------------------------------------------------

文件下载：
<action name="downloadAction" class="xxx.xx.Action.DownloadAction">
<result name="success" type="stream">
  <param name="contentType">text/plain</param> 下载类型，如image/jpeg
  <param name="contentDisposition">attachment;fileName="${fileName}"</param>  //中文名需要转码
可以在action中转，也可以直接在这里转，方法如下：
  <param name="contentDisposition">attachment;fileName="@java.net.URLEncoder@encode(${fileName},'UTF-8')"
  </param>
  
  <param name="inputName">downloadFile</param> //action中的方法为getDownloadFile,返回值是InputStream
  <param name="bufferSize">1024</param>  缓存大小
</result>
</action>


public class DownloadAction extends ActionSupport {
	private String fileName;
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	public InputStream getDownloadFile(){		
		InputStream in=null;
		try {
			fileName="任务及安排.xlsx";
			fileName=URLEncoder.encode(fileName,"utf-8");
			in = new FileInputStream(new File("e://任务及安排.xlsx"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	   return in;	
	}
}


访问静态方法需要在struts.xml文件中配置： 默认是false
<constant name="struts.ognl.allowStaticMethodAccess" value="true"></constant>
